#version 440

#define MAX_NUM_MATERIALS 8
#define MAX_NUM_VERTICES  512
#define MAX_NUM_TRIANGLES 512
#define MAX_NUM_SPHERES   512

struct light {
    vec4 ambient;
    vec4 specular;
    vec4 diffuse;
    vec3 pos;
};

struct material {
    vec4 ambient;
    vec4 diffuse;
    vec4 specular;
};

struct triangle {
    int index[4]; // pos idices + material idx
    int nindex[4]; // n idices
    int tindex[4]; // t idices + texture idx
};

struct sphere {
    float pos[3];
    float r;
};

struct hitinfo {
    vec3 point;
    vec3 normal;
    vec2 uv;
    int material_idx;
    int texture_idx;
    int type;
    float dist;
};

layout(binding = 0, rgba32f) uniform image2D framebuffer;
// wrriten by compute shader

layout (local_size_x = 1, local_size_y = 1) in;

layout(binding = 11, std430) buffer vertices
{
    float vertices_[MAX_NUM_VERTICES][3];
};

layout(binding = 12, std430) buffer n_vectors
{
    float nvectors_[MAX_NUM_VERTICES][3];
};

layout(binding = 13, std430) buffer tvertices
{
    float tvertices_[MAX_NUM_VERTICES][2];
};

layout(binding = 14, std430) buffer triangles
{
    triangle triangles_[MAX_NUM_VERTICES];
};

layout(binding = 15, std430) buffer spheres
{
    sphere spheres_[MAX_NUM_VERTICES];
};


uniform int num_vertices;
uniform int num_triangles;
uniform int num_spheres;
uniform int num_nvectors;

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray10;
uniform vec3 ray01;
uniform vec3 ray11;

light light1;
material materials[5];

bool intersect_triangle(vec3 origin, vec3 dir,
    const triangle t, out vec3 p, out vec3 normal, out vec2 uv)
{
    // TODO : Need to consider front and back

    vec3 e1, e2, h, s, q;
    float a, f, u, v, tmp;
    bool is_intersect = true;

    e1 = vec3(vertices_[t.index[1]][0] - vertices_[t.index[0]][0], 
              vertices_[t.index[1]][1] - vertices_[t.index[0]][1],
              vertices_[t.index[1]][2] - vertices_[t.index[0]][2]);

    e2 = vec3(vertices_[t.index[2]][0] - vertices_[t.index[0]][0], 
              vertices_[t.index[2]][1] - vertices_[t.index[0]][1],
              vertices_[t.index[2]][2] - vertices_[t.index[0]][2]);

    h = cross(dir, e2);
    a = dot(e1, h);

    if (a > -0.00001 && a < 0.00001) return false;
    
    f = 1/a;
    s = vec3(origin[0] - vertices_[t.index[0]][0], 
             origin[1] - vertices_[t.index[0]][1],
             origin[2] - vertices_[t.index[0]][2]);

    u = f * dot(s, h);

    if (u < 0.0 || u > 1.0) return false;
    
    q = cross(s, e1);
    v = f * dot(dir, q);

    if (v < 0.0 || u + v > 1.0) return false;

    tmp = f * dot(e2, q);

    if (tmp > 0.00001) {
        normal = (1 - u - v) * 
            vec3(nvectors_[t.nindex[0]][0],
                nvectors_[t.nindex[0]][1],
                nvectors_[t.nindex[0]][2]) +
            u * vec3(nvectors_[t.nindex[1]][0],
                nvectors_[t.nindex[1]][1],
                nvectors_[t.nindex[1]][2]) +
            v * vec3(nvectors_[t.nindex[2]][0],
                nvectors_[t.nindex[2]][1],
                nvectors_[t.nindex[2]][2]);
        uv = (1 - u - v) * 
            vec2(tvertices_[t.tindex[0]][0], 
                tvertices_[t.index[0]][1]) +
            u * vec2(tvertices_[t.tindex[1]][0],
                tvertices_[t.index[1]][1]) +
            v * vec2(tvertices_[t.tindex[2]][0],
                tvertices_[t.index[2]][1]);
        p = origin + tmp * dir;
        return true;
    }

    return false;
}

bool intersect_sphere(vec3 origin, vec3 dir,
    const sphere s, out vec3 p, out vec3 normal)
{
    // have to solve 
    // t^2 + 2 * dir * ( origin - s.pos ) * t 
    // + ( origin - s.pos ) ^ 2 - s.r ^ 2

    vec3 op = 
        vec3(origin.x - s.pos[0], origin.y - s.pos[1], origin.z - s.pos[2]);

    float b = 2 * dot(dir, op);
    float c = dot(op,op) - pow(s.r, 2);

    float discr = b * b - 4 * c;
    float x0, x1;

    if (discr < 0) return false;

    if (discr == 0) {
        x0 = x1 = -0.5 * b;
    }
    else {
        x0 = -0.5 * (b + sqrt(discr));
        x1 = -0.5 * (b - sqrt(discr));
    }

    if (x0 > x1) {
        float tmp = x0;
        x0 = x1;
        x1 = tmp;
    }

    if (x0 < 0) {
        if (x1 >= 0) {
            p = origin + x1 * dir;
        } else {
            return false;
        }
    }
    else {
        p = origin + x0 * dir;
    }

    normal =
        normalize(vec3(p.x - s.pos[0], p.y - s.pos[1], p.z - s.pos[2]));
    return true;
}

bool intersect_objects(vec3 origin, vec3 dir, out hitinfo info)
{
    int i;
    vec3 p;
    vec2 uv;
    vec3 normal;
    bool exist = false;
    float min_dist = 99999;

    for (i = 0; i < num_triangles; i++) {
        if (intersect_triangle(origin, dir, triangles_[i], p, normal, uv)) {
            float dist = distance(origin, p);
            if (min_dist > dist)
            {
                min_dist = dist;
                info.point = p;
                info.normal = normal;
                info.type = 0;
                info.dist = dist;
                info.texture_idx = triangles_[i].tindex[3];
                info.uv = uv;
                info.material_idx = triangles_[i].index[3];
                exist = true;
            }
        }
    }

    for (i = 0; i < num_spheres; i++) {
        if (intersect_sphere(origin, dir, spheres_[i], p, normal)) {
            float dist = distance(origin, p);
            if (dist > 0.01 && min_dist > dist) 
            {
                min_dist = dist;
                info.point = p;
                info.normal = normal;
                info.type = 1;
                info.dist = dist;
                info.material_idx = 2;
                exist = true;
            }
        }
    }

    return exist;
}

vec4 dott(vec4 a, vec4 b) 
{
    return vec4(a[0]*b[0], a[1]*b[1], a[2]*b[2], a[3]*b[3]);
}

vec4 reflect_trace_(vec3 origin, vec3 dir)
{
    hitinfo info;
    hitinfo info2;
    int i, count = 0;
    vec4 result = vec4(0.0, 0.0, 0.0, 1.0);

    if (intersect_objects(origin, dir, info)) {
        if (info.type == 0) {
            vec3 to_light = normalize(vec3(0, 8, 0) - info.point);
            result += dott(light1.ambient,materials[info.material_idx].ambient);
            info.point -= dir * 0.0001;
            intersect_objects(info.point, to_light, info2);
            if (info2.dist >= distance(info.point, vec3(0, 8, 0))) {  
                result += max(dot(info.normal, to_light), 0)
                    * dott(light1.diffuse, materials[info.material_idx].diffuse);
            }
        }
        else {
            vec3 to_light = normalize(vec3(0, 8, 0) - info.point);
            result += dott(light1.ambient, materials[2].ambient);
            info.point -= dir * 0.001;

            intersect_objects(info.point, to_light, info2);

            if (info2.dist >= distance(info.point, vec3(0, 8, 0)))
            {
                vec3 reflect = normalize(-to_light - 2*dot(info.normal,-to_light)*info.normal);
                result += dot(info.normal, to_light)
                    * dott(light1.diffuse, materials[2].diffuse);
                result += pow(max(dot(-dir, reflect), 0), 89)
                    * dott(light1.specular, materials[2].specular);
            }
        }
    }
    result[3] = 1;
    return result;
}

vec4 trace(vec3 origin, vec3 dir)
{
    hitinfo info;
    hitinfo info2;
    int i, count = 0;
    vec4 result = vec4(0.0, 0.0, 0.0, 1.0);

    if (intersect_objects(origin, dir, info)) {
        if (info.type == 0) {
            vec3 to_light = normalize(vec3(0, 8, 0) - info.point);
            result += dott(light1.ambient,materials[info.material_idx].ambient);
            info.point -= dir * 0.0001;
            intersect_objects(info.point, to_light, info2);
            if (info2.dist >= distance(info.point, vec3(0, 8, 0))) {  
                result += max(dot(info.normal, to_light), 0)
                    * dott(light1.diffuse, materials[info.material_idx].diffuse);
            }
            result += max(dot(info.normal, vec3(-1,0,0))*0.3, 0) *
                dott(light1.diffuse, materials[info.material_idx].diffuse);
            result += max(dot(info.normal, vec3(0,0,1))*0.3, 0) *
                dott(light1.diffuse, materials[info.material_idx].diffuse);
        }
        else {
            vec3 to_light = normalize(vec3(0, 8, 0) - info.point);
            result += dott(light1.ambient, materials[2].ambient);
            info.point += dir * 0.001;

            vec3 reflect_trace = normalize(dir - 2*dot(info.normal, dir) * info.normal);
            vec4 reflect_result = reflect_trace_(info.point, reflect_trace);
            result += dott(reflect_result, materials[2].ambient);

            intersect_objects(info.point, to_light, info2);

            if (info2.dist >= distance(info.point, vec3(0, 8, 0)))
            {
                vec3 reflect = normalize(-to_light - 2*dot(info.normal,-to_light)*info.normal);
                result += dot(info.normal, to_light)
                    * dott(light1.diffuse, materials[2].diffuse);
                result += pow(max(dot(-dir, reflect), 0), 89)
                    * dott(light1.specular, materials[2].specular);
                //result += dott(reflect_result, dot(info.normal, to_light) * materials[2].diffuse);
            } 
            else 
            {
                
            }
        }
    }
    result[3] = 1;
    return result;
}

void main()
{
    light1.pos = vec3(0, 10, 0);
    light1.ambient = vec4(1, 1, 1, 1);
    light1.diffuse = vec4(1, 1, 1, 1);
    light1.specular = vec4(1, 1, 1, 1);

    materials[0].ambient = vec4(0.1, 0.0, 0.0, 1.0);
    materials[0].diffuse = vec4(0.5, 0.0, 0.0, 1.0);
    materials[1].ambient = vec4(0.3, 0.3, 0.3, 1.0);
    materials[1].diffuse = vec4(0.3, 0.3, 0.3, 1.0);
    materials[2].ambient = vec4(0.10, 0.10, 0.10, 1.0);
    materials[2].specular = vec4(0.77, 0.77, 0.77, 1.0);
    materials[2].diffuse = vec4(0.28, 0.28, 0.28, 1.0);
    materials[3].diffuse = vec4(0, 0, 0, 0);
    materials[3].ambient = vec4(0, 0, 0, 0);

    // get index in global work group i.e x,y position
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    vec2 pos = pixel_coords / 1024.0;
    vec3 dir = normalize(mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x));
    vec4 pixel;

    pixel = trace(eye, dir);
    imageStore(framebuffer, pixel_coords, pixel);
}

// Reference : 
// https://github.com/LWJGL/lwjgl3-wiki/wiki/2.6.1.-Ray-tracing-with-OpenGL-Compute-Shaders-%28Part-I%29